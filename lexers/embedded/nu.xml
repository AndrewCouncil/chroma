<?xml version="1.0" encoding="UTF-8" ?>
<lexer>
  <config>
    <name>Nu</name>
    <alias>nu</alias>
    <filename>*.nu</filename>
    <mime_type>text/plain</mime_type>
  </config>
  <rules>
    <state name="root">
      <rule include="basic" />
      <rule include="data" />
    </state>
    <state name="basic">
      <rule pattern="\A#!.+\n">
        <token type="CommentHashbang" />
      </rule>
      <rule pattern="#.*\n">
        <token type="CommentSingle" />
      </rule>
      <rule
        pattern="\b(export-env|source-env|continue|hide-env|let-env|overlay|source|return|export|extern|module|error|break|while|const|alias|catch|match|make|loop|list|hide|else|use|let|try|for|def|new|mut|if|do|in|as)\b(\s*)"
      >
        <bygroups>
          <token type="Keyword" />
          <token type="TextWhitespace" />
        </bygroups>
      </rule>
      <rule
        pattern="\b(nu-highlight|run-external|is-not-empty|keybindings|is-terminal|interleave|export-env|enumerate|histogram|transpose|generate|split-by|par-each|with-env|complete|nu-check|metadata|load-env|is-empty|group-by|let-env|flatten|uniq-by|columns|compact|collect|reverse|inspect|history|headers|shuffle|explain|explore|sort-by|prepend|default|rename|append|plugin|random|format|filter|timeit|ulimit|config|reduce|mktemp|decode|upsert|values|reject|detect|select|update|insert|length|encode|schema|rotate|window|whoami|touch|mkdir|which|debug|bytes|clear|tutor|lines|input|every|where|merge|first|items|group|sleep|range|watch|split|start|panic|uname|parse|query|table|print|math|uniq|wrap|path|open|ansi|move|bits|view|last|char|roll|kill|join|save|into|http|date|hash|skip|grid|sort|glob|port|from|drop|stor|each|exec|find|take|exit|term|fill|url|ast|sys|str|zip|fmt|get|dfr|seq|any|tee|all|cal|cd|to|rm|ls|cp|mv|ps|du)\b(\s*)"
      >
        <bygroups>
          <token type="NameBuiltin" />
          <token type="TextWhitespace" />
        </bygroups>
      </rule>
      <rule pattern="\b(nothing|false|true|null)\b(\s*)">
        <bygroups>
          <token type="KeywordConstant" />
          <token type="TextWhitespace" />
        </bygroups>
      </rule>
      <rule pattern="(\^)(\w+)">
        <bygroups>
          <token type="Operator" />
          <token type="NameFunction" />
        </bygroups>
      </rule>
      <rule pattern="(def|alias)(\s+)(\w+)">
        <bygroups>
          <token type="Keyword" />
          <token type="TextWhitespace" />
          <token type="NameFunction" />
        </bygroups>
      </rule>
      <rule pattern="(\$?\w+)(\s*)(=|\+=|-=|\*=|/=|\+\+=)">
        <bygroups>
          <token type="NameVariable" />
          <token type="TextWhitespace" />
          <token type="Operator" />
        </bygroups>
      </rule>
      <rule pattern="\$\w+">
        <token type="NameVariable" />
      </rule>
      <rule pattern="\$&quot;" push="interpolated_string">
        <token type="LiteralStringDouble" />
      </rule>
      <rule pattern="--\w+(-\w+)*">
        <token type="NameAttribute" />
      </rule>
      <rule pattern="-\w">
        <token type="NameAttribute" />
      </rule>
      <rule pattern="==|!=|&lt;=|&gt;=|&lt;|&gt;">
        <token type="Operator" />
      </rule>
      <rule pattern="\+|-|\*|/|%|\*\*">
        <token type="Operator" />
      </rule>
      <rule pattern="and|or|not|in">
        <token type="Operator" />
      </rule>
      <rule pattern="=~|!~|like|not-like">
        <token type="Operator" />
      </rule>
      <rule pattern="&amp;&amp;|\|\|">
        <token type="Operator" />
      </rule>
      <rule
        pattern="o&gt;|out&gt;|e&gt;|err&gt;|e\+o&gt;|err\+out&gt;|o\+e&gt;|out\+err&gt;"
      >
        <token type="Operator" />
      </rule>
      <rule
        pattern="o&gt;&gt;|out&gt;&gt;|e&gt;&gt;|err&gt;&gt;|e\+o&gt;&gt;|err\+out&gt;&gt;|o\+e&gt;&gt;|out\+err&gt;&gt;"
      >
        <token type="Operator" />
      </rule>
      <rule
        pattern="e&gt;\||err&gt;\||e\+o&gt;\||err\+out&gt;\||o\+e&gt;\||out\+err&gt;\|"
      >
        <token type="Operator" />
      </rule>
      <rule pattern="\.\.=?|\.\.&lt;?">
        <token type="Operator" />
      </rule>
      <rule pattern="\|">
        <token type="Operator" />
      </rule>
      <rule pattern="=>">
        <token type="Operator" />
      </rule>
      <rule pattern="[\[\]{}()]">
        <token type="Punctuation" />
      </rule>
      <rule pattern="[,;]">
        <token type="Punctuation" />
      </rule>
      <rule pattern="\.\.\.">
        <token type="Punctuation" />
      </rule>
      <rule pattern="[@:]">
        <token type="Punctuation" />
      </rule>
      <rule pattern="->">
        <token type="Punctuation" />
      </rule>
    </state>
    <state name="data">
      <rule pattern="0x[0-9a-fA-F]+">
        <token type="LiteralNumber" />
      </rule>
      <rule pattern="0b[01]+">
        <token type="LiteralNumber" />
      </rule>
      <rule pattern="0o[0-7]+">
        <token type="LiteralNumber" />
      </rule>
      <rule pattern="\d+(\.\d+)?([eE][+-]?\d+)?">
        <token type="LiteralNumber" />
      </rule>
      <rule pattern="\d+(\.\d+)?(ns|us|ms|sec|min|hr|day|wk)">
        <token type="LiteralNumber" />
      </rule>
      <rule
        pattern="\d+(\.\d+)?(B|KB|MB|GB|TB|PB|EB|ZB|YB|KiB|MiB|GiB|TiB|PiB|EiB|ZiB|YiB)"
      >
        <token type="LiteralNumber" />
      </rule>
      <rule
        pattern="\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})"
      >
        <token type="LiteralNumber" />
      </rule>
      <rule pattern="\d{4}-\d{2}-\d{2}">
        <token type="LiteralNumber" />
      </rule>
      <rule pattern="r#&quot;[^&quot;]*&quot;#">
        <token type="LiteralString" />
      </rule>
      <rule pattern="r'[^']*'">
        <token type="LiteralString" />
      </rule>
      <rule pattern="&quot;([^&quot;\\]|\\.)*&quot;">
        <token type="LiteralStringDouble" />
      </rule>
      <rule pattern="'([^'\\]|\\.)*'">
        <token type="LiteralStringSingle" />
      </rule>
      <rule pattern="\\[\\\'&quot;nrt0$]">
        <token type="LiteralStringEscape" />
      </rule>
      <rule pattern="\\x[0-9a-fA-F]{2}">
        <token type="LiteralStringEscape" />
      </rule>
      <rule pattern="\\u\{[0-9a-fA-F]+\}">
        <token type="LiteralStringEscape" />
      </rule>
      <rule pattern="\s+">
        <token type="TextWhitespace" />
      </rule>
      <rule pattern="[^\s\[\]{}()$&quot;'`\\&lt;&gt;&amp;|;#]+">
        <token type="Text" />
      </rule>
    </state>
    <state name="interpolated_string">
      <rule pattern="&quot;" pop="1">
        <token type="LiteralStringDouble" />
      </rule>
      <rule pattern="\(" push="interpolation">
        <token type="LiteralStringInterpol" />
      </rule>
      <rule pattern="([^&quot;\\(]|\\.)+">
        <token type="LiteralStringDouble" />
      </rule>
    </state>
    <state name="interpolation">
      <rule pattern="\)" pop="1">
        <token type="LiteralStringInterpol" />
      </rule>
      <rule include="root" />
    </state>
  </rules>
</lexer>
